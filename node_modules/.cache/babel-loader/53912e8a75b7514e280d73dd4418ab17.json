{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar OnTapOutside = (_temp2 = _class = function (_React$Component) {\n  _inherits(OnTapOutside, _React$Component);\n\n  function OnTapOutside() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, OnTapOutside);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OnTapOutside.__proto__ || Object.getPrototypeOf(OnTapOutside)).call.apply(_ref, [this].concat(args))), _this), _this.onTouchStart = function (event) {\n      // Ignore multitouch.\n      if (event.touches.length > 1) {\n        // Reset.\n        return _this.onTouchCancel();\n      }\n\n      _this.initialTouchX = event.changedTouches[0].clientX;\n      _this.initialTouchY = event.changedTouches[0].clientY;\n      _this.tapping = true;\n    }, _this.onTouchMove = function (event) {\n      var moveThreshold = _this.props.moveThreshold; // Ignore multitouch.\n\n      if (!_this.tapping) {\n        return;\n      }\n\n      var deltaX = Math.abs(event.changedTouches[0].clientX - _this.initialTouchX);\n      var deltaY = Math.abs(event.changedTouches[0].clientY - _this.initialTouchY);\n\n      if (deltaX > moveThreshold || deltaY > moveThreshold) {\n        // Reset.\n        _this.onTouchCancel();\n      }\n    }, _this.onTouchEnd = function (event) {\n      // Ignore multitouch.\n      if (!_this.tapping) {\n        return;\n      } // Reset.\n\n\n      _this.onTouchCancel();\n\n      _this.onTap(event);\n    }, _this.onTouchCancel = function () {\n      _this.initialTouchX = undefined;\n      _this.initialTouchY = undefined;\n      _this.tapping = false;\n    }, _this.onTap = function (event) {\n      var _this$props = _this.props,\n          getContainerNode = _this$props.getContainerNode,\n          getTogglerNode = _this$props.getTogglerNode,\n          onTapOutside = _this$props.onTapOutside;\n\n      if (getContainerNode().contains(event.target)) {\n        return;\n      }\n\n      if (getTogglerNode) {\n        if (getTogglerNode().contains(event.target)) {\n          return;\n        }\n      }\n\n      if (onTapOutside) {\n        _this.focusOut = true;\n        onTapOutside(event);\n        _this.focusOut = undefined;\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(OnTapOutside, [{\n    key: 'listenToTouches',\n    value: function listenToTouches() {\n      document.addEventListener('touchstart', this.onTouchStart);\n      document.addEventListener('touchmove', this.onTouchMove);\n      document.addEventListener('touchend', this.onTouchEnd);\n      document.addEventListener('touchcancel', this.onTouchCancel);\n    }\n  }, {\n    key: 'stopListeningToTouches',\n    value: function stopListeningToTouches() {\n      document.removeEventListener('touchstart', this.onTouchStart);\n      document.removeEventListener('touchmove', this.onTouchMove);\n      document.removeEventListener('touchend', this.onTouchEnd);\n      document.removeEventListener('touchcancel', this.onTouchCancel);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.stopListeningToTouches();\n    } // On mobile devices \"blur\" event isn't triggered\n    // when a user taps outside. This is to allow touch scrolling\n    // while not losing focus on an input field or a button.\n    // Adding a manual \"on click\" listener to emulate\n    // \"on blur\" event when user taps outside (to collapse the expandable).\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var children = this.props.children;\n      return children;\n    }\n  }]);\n\n  return OnTapOutside;\n}(_react2.default.Component), _class.propTypes = {\n  onTapOutside: _propTypes2.default.func.isRequired,\n  getTogglerNode: _propTypes2.default.func,\n  getContainerNode: _propTypes2.default.func.isRequired,\n  moveThreshold: _propTypes2.default.number.isRequired\n}, _class.defaultProps = {\n  moveThreshold: 5\n}, _temp2);\nexports.default = OnTapOutside;","map":null,"metadata":{},"sourceType":"script"}