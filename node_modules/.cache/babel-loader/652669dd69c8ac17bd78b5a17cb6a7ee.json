{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.onBlur = onBlur;\nexports.focus = focus;\n\nvar _dom = require('./dom');\n\nfunction onBlur(event, onFocusOut, getComponentNode, getComponentNode2, preventBlur) {\n  function _onBlur(focusedNode) {\n    if (preventBlur) {\n      if (preventBlur() === true) {\n        return false;\n      }\n    } // If the currently focused element is inside the expandable\n    // then don't collapse it.\n\n\n    if (focusedNode && (focusedNode instanceof Element || focusedNode instanceof HTMLDocument) && (getComponentNode().contains(focusedNode) || getComponentNode2 && getComponentNode2().contains(focusedNode))) {\n      return false;\n    } // Collapse the expandable.\n    // (clicked/tapped outside or tabbed-out)\n\n\n    onFocusOut(event);\n    return true;\n  } // Blur `event.relatedTarget` doesn't work in Internet Explorer (in React).\n  // https://github.com/gpbl/react-day-picker/issues/668\n  // https://github.com/facebook/react/issues/3751\n  //\n  // Therefore, using a 30ms timeout hack in `onBlur` handler\n  // to get the new currently focused page element\n  // and check if that element is inside the component.\n  // https://github.com/mui-org/material-ui/blob/v1-beta/packages/material-ui/src/Menu/MenuList.js\n  // Until Internet Explorer is no longer a supported browser.\n  //\n\n\n  if ((0, _dom.isInternetExplorer)()) {\n    return setTimeout(function () {\n      return getComponentNode() && _onBlur(document.activeElement);\n    }, 30);\n  } // There was an error in Firefox 52:\n  // \"Argument 1 of Node.contains does not implement interface Node\".\n  // To prevent such errors `event.relatedTarget` is validated manually here.\n\n\n  return _onBlur((0, _dom.isElement)(event.relatedTarget) ? event.relatedTarget : undefined);\n}\n/**\r\n * Focuses on a React component (if any).\r\n * @param  {?object} component\r\n */\n\n\nfunction focus(component) {\n  // If the component has been already unmounted.\n  // (safety)\n  if (!component) {\n    return;\n  }\n\n  if (typeof component.focus === 'function') {\n    component.focus();\n    return true;\n  } // `findDOMNode()` is deprecated in React.\n  // https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage\n  // // For cases when `<List.Item/>` wraps some custom\n  // // `<Button/>` component which renders a generic `<button/>`.\n  // const node = ReactDOM.findDOMNode(component)\n  // if (node && node.focus) {\n  // \tnode.focus()\n  // \treturn true\n  // }\n\n}","map":null,"metadata":{},"sourceType":"script"}