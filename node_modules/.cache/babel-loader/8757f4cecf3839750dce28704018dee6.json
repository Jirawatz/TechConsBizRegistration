{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _class2, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _ScrollableList = require('./ScrollableList');\n\nvar _ScrollableList2 = _interopRequireDefault(_ScrollableList);\n\nvar _Expandable = require('./Expandable');\n\nvar _Expandable2 = _interopRequireDefault(_Expandable);\n\nvar _List = require('./List');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nvar ExpandableList = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp2 = _class2 = function (_PureComponent) {\n  _inherits(ExpandableList, _PureComponent);\n\n  function ExpandableList() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ExpandableList);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ExpandableList.__proto__ || Object.getPrototypeOf(ExpandableList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.toggle = function () {\n      return _this.expandable.toggle();\n    }, _this.expand = function (parameters) {\n      return _this.expandable.expand(parameters);\n    }, _this.collapse = function () {\n      return _this.expandable.collapse();\n    }, _this.isExpanded = function () {\n      return _this.expandable.isExpanded();\n    }, _this.preload = function () {\n      return _this.expandable.preload();\n    }, _this.onBlur = function (event) {\n      return _this.expandable.onBlur(event);\n    }, _this.chooseFocusedItem = function () {\n      return _this.list && _this.list.chooseFocusedItem();\n    }, _this.getFocusedItemIndex = function () {\n      return _this.list ? _this.list.getFocusedItemIndex() : undefined;\n    }, _this.focusItem = function (index) {\n      return _this.list.focusItem(index);\n    }, _this.clearFocus = function () {\n      return _this.list.clearFocus();\n    }, _this.onKeyDown = function (event) {\n      var onEnter = _this.props.onEnter;\n\n      switch (event.keyCode) {\n        // \"Escape\".\n        // Collapse.\n        case 27:\n          event.preventDefault(); // Collapse the list if it's expanded.\n\n          return _this.expandable.collapse();\n        // \"Up\" arrow.\n        // Select the previous item (if present).\n\n        case 38: // \"Down\" arrow.\n        // Select the next item (if present).\n\n        case 40:\n          if (_this.isExpanded()) {\n            // Navigate the list (if it was already expanded).\n            _this.list.onKeyDown(event);\n          } else {\n            // Expand the list if it's collapsed.\n            event.preventDefault();\n\n            _this.expandable.expand();\n          }\n\n          return;\n        // \"Enter\".\n\n        case 13:\n          // Select the currently focused item.\n          return _this.list && _this.list.onKeyDown(event);\n      }\n    }, _this.storeExpandableRef = function (ref) {\n      return _this.expandable = ref;\n    }, _this.storeListRef = function (ref) {\n      return _this.list = ref;\n    }, _this.onChange = function (value, index) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          focusSelectedItem = _this$props.focusSelectedItem;\n\n      if (onChange) {\n        onChange(value, index);\n      }\n\n      if (focusSelectedItem) {\n        _this.setState({\n          selectedItemIndex: index\n        });\n      }\n\n      _this.collapsedDueToItemBeingSelected = true;\n\n      _this.collapse();\n\n      _this.collapsedDueToItemBeingSelected = undefined;\n    }, _this.hasOnChange = function () {\n      var onChange = _this.props.onChange;\n      return !!onChange;\n    }, _this.onCollapse = function (parameters) {\n      var onCollapse = _this.props.onCollapse;\n\n      if (onCollapse) {\n        onCollapse(_extends({}, parameters, {\n          collapsedDueToItemBeingSelected: _this.collapsedDueToItemBeingSelected\n        }));\n      }\n\n      _this.list && _this.list.clearFocus();\n    }, _this.onExpand = function () {\n      var _this$props2 = _this.props,\n          focusOnExpand = _this$props2.focusOnExpand,\n          onExpand = _this$props2.onExpand,\n          children = _this$props2.children;\n      var selectedItemIndex = _this.state.selectedItemIndex;\n\n      if (onExpand) {\n        onExpand();\n      }\n\n      if (focusOnExpand) {\n        if (selectedItemIndex === undefined) {\n          _this.list.focus();\n        } else {\n          _this.list.focusItem(selectedItemIndex);\n        }\n      } // Re-calculate `<ScrollableList/>` height.\n\n\n      _this.list.calculateHeight();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ExpandableList, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          alignment = _props.alignment,\n          upward = _props.upward,\n          scrollIntoView = _props.scrollIntoView,\n          preload = _props.preload,\n          onPreloadStateChange = _props.onPreloadStateChange,\n          getTogglerNode = _props.getTogglerNode,\n          onFocusOut = _props.onFocusOut,\n          onChange = _props.onChange,\n          highlightSelectedItem = _props.highlightSelectedItem,\n          closeLabel = _props.closeLabel,\n          closeButtonIcon = _props.closeButtonIcon,\n          className = _props.className,\n          children = _props.children,\n          rest = _objectWithoutProperties(_props, ['alignment', 'upward', 'scrollIntoView', 'preload', 'onPreloadStateChange', 'getTogglerNode', 'onFocusOut', 'onChange', 'highlightSelectedItem', 'closeLabel', 'closeButtonIcon', 'className', 'children']);\n\n      return _react2.default.createElement(_Expandable2.default, {\n        ref: this.storeExpandableRef,\n        alignment: alignment,\n        upward: upward,\n        scrollIntoView: scrollIntoView,\n        preload: preload,\n        onPreloadStateChange: onPreloadStateChange,\n        onExpand: this.onExpand,\n        onCollapse: this.onCollapse,\n        getTogglerNode: getTogglerNode,\n        onFocusOut: onFocusOut,\n        closeLabel: closeLabel,\n        closeButtonIcon: closeButtonIcon,\n        className: (0, _classnames2.default)(className, 'rrui__expandable-list', {\n          'rrui__expandable-list--left-aligned': alignment === 'left',\n          'rrui__expandable-list--right-aligned': alignment === 'right'\n        })\n      }, _react2.default.createElement(_ScrollableList2.default, _extends({}, rest, {\n        expandable: true,\n        ref: this.storeListRef,\n        onChange: this.onChange,\n        hasOnChange: this.hasOnChange(),\n        highlightSelectedItem: onChange === undefined && highlightSelectedItem === undefined ? false : highlightSelectedItem\n      }), children));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, state) {\n      // Using `!state.hasOwnProperty()` as \"not initialized\"\n      // because when there's an empty option `props.value` is `undefined`.\n      if (!state.hasOwnProperty('selectedItemValue') || state.selectedItemValue !== props.value) {\n        return {\n          selectedItemValue: props.value,\n          // `findItemIndexByValue()` must return `undefined` for \"no such item\".\n          selectedItemIndex: (0, _List.findItemIndexByValue)(props.value, props.children)\n        };\n      }\n\n      return null;\n    } // If a `<List/>` has `onChange` then it wraps `<List.Item/>`s with `<button/>`s.\n    // The `onChange` added by `<ExpandableList/>` overrides the original `onChange`.\n    // If there was no `onChange` — there will be one.\n    // So to retain that info `hasOnChange` property is used as a workaround.\n\n  }]);\n\n  return ExpandableList;\n}(PureComponent), _class2.propTypes = {\n  // Maximum items fitting the list height (scrollable).\n  scrollMaxItems: _propTypes2.default.number,\n  // Whether should add `margin-right` for scrollbar width on overflow.\n  scrollBarPadding: _propTypes2.default.bool,\n  // Preloads the contents of the expandable list\n  // before it's expanded. Must return a `Promise`.\n  preload: _propTypes2.default.func,\n  // Whether the list items should be focused upon expand.\n  focusOnExpand: _propTypes2.default.bool.isRequired,\n  focusSelectedItem: _propTypes2.default.bool.isRequired,\n  className: _propTypes2.default.string\n}, _class2.defaultProps = {\n  alignment: 'left',\n  focusOnExpand: true,\n  focusSelectedItem: true\n}, _temp2)) || _class;\n\nexports.default = ExpandableList;","map":null,"metadata":{},"sourceType":"script"}