{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _class2, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _ExpandableList = require('./ExpandableList');\n\nvar _ExpandableList2 = _interopRequireDefault(_ExpandableList);\n\nvar _List = require('./List');\n\nvar _List2 = _interopRequireDefault(_List);\n\nvar _TextInputLabel = require('./TextInputLabel');\n\nvar _TextInputLabel2 = _interopRequireDefault(_TextInputLabel);\n\nvar _Ellipsis = require('./Ellipsis');\n\nvar _Ellipsis2 = _interopRequireDefault(_Ellipsis);\n\nvar _Divider = require('./Divider');\n\nvar _Divider2 = _interopRequireDefault(_Divider);\n\nvar _WithError = require('./WithError');\n\nvar _WithError2 = _interopRequireDefault(_WithError);\n\nvar _reduxForm = require('./utility/redux-form');\n\nvar _focus = require('./utility/focus');\n\nvar _dom = require('./utility/dom');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\nvar empty_value_option_value = '';\n\nvar Select = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp2 = _class2 = function (_PureComponent) {\n  _inherits(Select, _PureComponent);\n\n  function Select() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Select);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Select.__proto__ || Object.getPrototypeOf(Select)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.focus = function () {\n      return _this.select.focus();\n    }, _this.focusToggler = function () {\n      return _this.selectButton.focus();\n    }, _this.onCollapse = function (_ref2) {\n      var focusOut = _ref2.focusOut;\n\n      _this.setState({\n        isExpanded: false\n      });\n\n      if (!focusOut) {\n        if (_this.isUsingKeyboard) {\n          _this.focus();\n        } else {\n          _this.focusToggler();\n        }\n      }\n    }, _this.onExpand = function () {\n      return _this.setState({\n        isExpanded: true\n      });\n    }, _this.expand = function () {\n      return _this.list.expand();\n    }, _this.collapse = function () {\n      return _this.list.collapse();\n    }, _this.toggle = function () {\n      return _this.list.toggle();\n    }, _this.storeListRef = function (ref) {\n      return _this.list = ref;\n    }, _this.storeSelectNode = function (node) {\n      return _this.select = node;\n    }, _this.storeSelectButton = function (node) {\n      return _this.selectButton = node;\n    }, _this.storeInputComponentNode = function (node) {\n      return _this.inputComponentNode = node;\n    }, _this.storeContainerNode = function (node) {\n      return _this.container = node;\n    }, _this.getSelectButton = function () {\n      return _this.selectButton;\n    }, _this.nativeSelectOnKeyDown = function (event) {\n      _this.isUsingKeyboard = true;\n\n      if (_this.shouldShowOptionsList()) {\n        // Native select is the main focusable element now\n        // even when the custom select is rendered.\n        // this.focusToggler()\n        _this.onKeyDownFromNativeSelect = true;\n\n        _this.onKeyDown(event);\n      }\n    }, _this.nativeSelectOnMouseDown = function (event) {\n      if (_this.shouldShowOptionsList()) {\n        event.preventDefault(); // Native select is the main focusable element now\n        // even when the custom select is rendered.\n        // this.focusToggler()\n\n        _this.toggle();\n      }\n    }, _this.nativeSelectOnChange = function (event) {\n      var _this$props = _this.props,\n          native = _this$props.native,\n          nativeExpanded = _this$props.nativeExpanded;\n      var value = event.target.value; // Convert back from an empty string to `undefined`\n\n      if (value === empty_value_option_value) {\n        // `null` is not accounted for, use `undefined` instead.\n        value = undefined;\n      }\n\n      _this.setValue(value); // Firefox has a bug:\n      // Spacebar key on native `<select/>` is not being \"preventDefault\"ed.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1428992\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1019630\n      // https://stackoverflow.com/questions/15141398/cannot-preventdefault-via-firefox-on-a-select\n      // This workaround hides the custom `<Select/>`\n      // when a user selects something in the native `<select/>`\n      // which expands over the custom one in Firefox due to the bug.\n\n\n      if (navigator.userAgent.toLowerCase().indexOf('firefox') >= 0) {\n        if (!native && !nativeExpanded) {\n          _this.collapse();\n        }\n      }\n    }, _this.onClick = function (event) {\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          nativeExpanded = _this$props2.nativeExpanded;\n\n      if (!disabled) {\n        _this.toggle();\n      }\n    }, _this.onKeyDown = function (event) {\n      var _this$props3 = _this.props,\n          disabled = _this$props3.disabled,\n          value = _this$props3.value,\n          required = _this$props3.required;\n      var isExpanded = _this.state.isExpanded; // Reset \"event came from native select\" flag.\n\n      var fromNativeSelect = _this.onKeyDownFromNativeSelect;\n      _this.onKeyDownFromNativeSelect = false;\n\n      if (disabled) {\n        return;\n      }\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (!isExpanded) {\n        if ((0, _dom.submitFormOnCtrlEnter)(event, _this.selectButton)) {\n          return;\n        }\n      }\n\n      if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        // \"Up\" arrow.\n        // Select the previous item (if present).\n        case 38: // \"Down\" arrow.\n        // Select the next item (if present).\n\n        case 40:\n          // Firefox has a bug:\n          // Up/Down arrow keys on native `<select/>` are not being \"preventDefault\"ed.\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1428992\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1019630\n          // https://stackoverflow.com/questions/15141398/cannot-preventdefault-via-firefox-on-a-select\n          // This workaround doesn't expand the custom `<Select/>`\n          // when a user presses an Up/Down arrow key on the native `<select/>`.\n          if (navigator.userAgent.toLowerCase().indexOf('firefox') >= 0) {\n            return;\n          }\n\n          return _this.list.onKeyDown(event);\n        // \"Enter\".\n\n        case 13:\n          // Submit containing `<form/>`.\n          // Expand otherwise.\n          if (required && isEmptyValue(value) || !(0, _dom.submitContainingForm)(_this.selectButton)) {\n            _this.expand();\n          }\n\n          return event.preventDefault();\n        // \"Spacebar\".\n\n        case 32:\n          if (fromNativeSelect) {\n            // Firefox has a bug:\n            // Spacebar key on native `<select/>` is not being \"preventDefault\"ed.\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1428992\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1019630\n            // https://stackoverflow.com/questions/15141398/cannot-preventdefault-via-firefox-on-a-select\n            event.preventDefault();\n\n            _this.expand();\n          }\n\n          return;\n      }\n    }, _this.setValue = function (newValue) {\n      var _this$props4 = _this.props,\n          value = _this$props4.value,\n          onChange = _this$props4.onChange; // Call `onChange` only if the `value` did change.\n\n      if (newValue !== value) {\n        onChange(newValue);\n      }\n    }, _this.onBlur = function (event) {\n      clearTimeout(_this.blurTimer);\n      _this.blurTimer = (0, _focus.onBlur)(event, _this.onFocusOut, function () {\n        return _this.container;\n      });\n    }, _this.onFocusOut = function (event) {\n      var _this$props5 = _this.props,\n          native = _this$props5.native,\n          nativeExpanded = _this$props5.nativeExpanded,\n          onBlur = _this$props5.onBlur,\n          value = _this$props5.value;\n\n      if (!native && !nativeExpanded) {\n        // `window.rruiCollapseOnFocusOut` can be used\n        // for debugging expandable contents.\n        if (window.rruiCollapseOnFocusOut !== false) {\n          _this.collapse();\n        }\n      } // // Collapse the options `<List/>` if it's expanded.\n      // if (this.list) {\n      // \tthis.list.onBlur(event)\n      // }\n\n\n      _this._onFocusOut();\n\n      if (onBlur) {\n        (0, _reduxForm.onBlurForReduxForm)(onBlur, event, value);\n      }\n    }, _this.onFocusIn = function () {\n      return _this.setState({\n        isFocused: true\n      });\n    }, _this._onFocusOut = function () {\n      return _this.setState({\n        isFocused: false\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // On mobile devices the <button/> is focused instead of <select/>\n  // because when <select/> is focused then native mobile <select/> is expanded.\n\n\n  _createClass(Select, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.blurTimer);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          upward = _props.upward,\n          icon = _props.icon,\n          compact = _props.compact,\n          scroll = _props.scroll,\n          scrollMaxItems = _props.scrollMaxItems,\n          scrollIntoView = _props.scrollIntoView,\n          alignment = _props.alignment,\n          saveOnIcons = _props.saveOnIcons,\n          native = _props.native,\n          disabled = _props.disabled,\n          required = _props.required,\n          placeholder = _props.placeholder,\n          options = _props.options,\n          value = _props.value,\n          onChange = _props.onChange,\n          indicateInvalid = _props.indicateInvalid,\n          error = _props.error,\n          closeButtonIcon = _props.closeButtonIcon,\n          closeLabel = _props.closeLabel,\n          wait = _props.wait,\n          style = _props.style,\n          className = _props.className;\n      var _state = this.state,\n          isExpanded = _state.isExpanded,\n          isFocused = _state.isFocused;\n      var containerStyle = {\n        textAlign: alignment\n      };\n      var label = this.getLabel();\n      return _react2.default.createElement(_WithError2.default, {\n        setRef: this.storeContainerNode,\n        error: error,\n        indicateInvalid: indicateInvalid,\n        style: style ? _extends({}, containerStyle, style) : containerStyle,\n        className: (0, _classnames2.default)(className, 'rrui__select', {\n          'rrui__select--compact': compact || icon,\n          'rrui__select--focus': isFocused\n        })\n      }, _react2.default.createElement('div', {\n        ref: this.storeInputComponentNode,\n        className: 'rrui__input'\n      }, wait && _react2.default.createElement(_Ellipsis2.default, null), this.renderNativeSelect(), !native && this.renderSelectButton(), label && _react2.default.createElement(_TextInputLabel2.default, {\n        'aria-hidden': true,\n        value: value,\n        required: required,\n        invalid: indicateInvalid && error,\n        floats: false\n      }, label), this.shouldShowOptionsList() && _react2.default.createElement(_ExpandableList2.default, {\n        ref: this.storeListRef,\n        'aria-label': this.getAriaLabel(),\n        'aria-required': required && isEmptyValue(value) ? true : undefined,\n        'aria-invalid': error && indicateInvalid ? true : undefined,\n        upward: upward,\n        alignment: alignment,\n        scrollIntoView: scrollIntoView,\n        scrollMaxItems: scroll === false ? 0 : scrollMaxItems,\n        tabbable: false,\n        value: value,\n        onChange: this.setValue,\n        onCollapse: this.onCollapse,\n        onExpand: this.onExpand,\n        getTogglerNode: this.getSelectButton,\n        onFocusIn: this.onFocusIn,\n        onFocusOut: this.onFocusOut,\n        closeButtonIcon: closeButtonIcon,\n        closeLabel: closeLabel,\n        className: (0, _classnames2.default)('rrui__shadow', 'rrui__options-list', {\n          'rrui__options-list--left-aligned': alignment === 'left',\n          'rrui__options-list--right-aligned': alignment === 'right'\n        })\n      }, options.map(function (option, i) {\n        return _react2.default.createElement(_List2.default.Item, {\n          key: i,\n          value: option.value,\n          icon: option.divider || saveOnIcons ? undefined : option.icon\n        }, option.divider ? _react2.default.createElement(_Divider2.default, null) : option.content ? option.content(option) : option.label);\n      }))));\n    }\n  }, {\n    key: 'renderSelectButton',\n    value: function renderSelectButton() {\n      var _props2 = this.props,\n          wait = _props2.wait,\n          value = _props2.value,\n          disabled = _props2.disabled,\n          required = _props2.required,\n          icon = _props2.icon,\n          title = _props2.title,\n          native = _props2.native,\n          nativeExpanded = _props2.nativeExpanded,\n          toggleClassName = _props2.toggleClassName,\n          indicateInvalid = _props2.indicateInvalid,\n          error = _props2.error;\n      var isExpanded = this.state.isExpanded;\n      var selected = this.getSelectedOption();\n      var selectedOptionLabel = selected && selected.label || this.getPlaceholder();\n      var showIconOnly = icon && selected && selected.icon; // ARIA (accessibility) roles info:\n      // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html\n      //\n      // `aria-haspopup`:\n      // https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup\n      // WAI-ARIA 1.1 is not yet supported, so not using `aria-haspopup=\"listbox\"`.\n      // This button could be focusable in case of !native && !nativeExpanded.\n      // In case of nativeExpanded if this button was focusable then the user would\n      // tab to the button and press Spacebar key and there would be no way to\n      // expand the native select so the keyboard user would be stuck.\n      // Because of this, this button is never tabbable and native select always is.\n\n      return _react2.default.createElement('button', {\n        ref: this.storeSelectButton,\n        type: 'button',\n        disabled: disabled,\n        onClick: this.onClick,\n        onKeyDown: this.onKeyDown,\n        onFocus: this.onFocusIn,\n        onBlur: this.onBlur,\n        tabIndex: -1,\n        title: title,\n        'aria-label': this.getAriaLabel() || (showIconOnly ? selectedOptionLabel : undefined),\n        'aria-expanded': isExpanded ? true : false,\n        className: (0, _classnames2.default)('rrui__input-element', 'rrui__button-reset', 'rrui__outline', 'rrui__select__button', toggleClassName, {\n          'rrui__select__button--empty': isEmptyValue(value) && !this.hasEmptyOption(),\n          'rrui__select__button--invalid': indicateInvalid && error,\n          'rrui__select__button--disabled': disabled\n        })\n      }, _react2.default.createElement('span', {\n        className: 'rrui__select__selected-content'\n      }, _react2.default.createElement('span', {\n        className: (0, _classnames2.default)('rrui__select__selected-label', {\n          'rrui__select__selected-label--required': !this.getLabel() && required && isEmptyValue(value)\n        })\n      }, showIconOnly ? _react2.default.createElement(selected.icon, {\n        value: value,\n        label: selectedOptionLabel\n      }) : selectedOptionLabel), !wait && _react2.default.createElement('span', {\n        className: 'rrui__select__arrow'\n      })));\n    }\n  }, {\n    key: 'renderNativeSelect',\n    value: function renderNativeSelect() {\n      var _props3 = this.props,\n          name = _props3.name,\n          value = _props3.value,\n          label = _props3.label,\n          disabled = _props3.disabled,\n          required = _props3.required,\n          native = _props3.native,\n          nativeExpanded = _props3.nativeExpanded,\n          error = _props3.error,\n          indicateInvalid = _props3.indicateInvalid,\n          tabIndex = _props3.tabIndex;\n      return _react2.default.createElement('select', {\n        ref: this.storeSelectNode,\n        name: name,\n        value: isEmptyValue(value) ? empty_value_option_value : value,\n        disabled: disabled,\n        onKeyDown: this.nativeSelectOnKeyDown,\n        onMouseDown: this.nativeSelectOnMouseDown,\n        onChange: this.nativeSelectOnChange,\n        onFocus: this.onFocusIn,\n        onBlur: this.onBlur,\n        tabIndex: tabIndex,\n        'aria-label': this.getAriaLabel(),\n        'aria-required': required && isEmptyValue(value) ? true : undefined,\n        'aria-invalid': error && indicateInvalid ? true : undefined,\n        className: (0, _classnames2.default)( // `:focus` style is implemented via border color\n        // so outline can be muted safely here.\n        'rrui__outline', 'rrui__select__native', {\n          'rrui__select__native--overlay': !native,\n          'rrui__select__native--invalid': indicateInvalid && error\n        })\n      }, this.renderNativeSelectOptions());\n    }\n  }, {\n    key: 'renderNativeSelectOptions',\n    value: function renderNativeSelectOptions() {\n      var _this2 = this;\n\n      var _props4 = this.props,\n          options = _props4.options,\n          value = _props4.value,\n          placeholder = _props4.placeholder;\n      var empty_option_present = false;\n      var rendered_options = options.map(function (option) {\n        var value = option.value,\n            label = option.label,\n            divider = option.divider;\n\n        if (!divider && isEmptyValue(value)) {\n          empty_option_present = true;\n          value = empty_value_option_value;\n        }\n\n        return _this2.renderNativeSelectOption(value, label, divider === true, divider);\n      });\n\n      if (isEmptyValue(value) && !empty_option_present) {\n        rendered_options.unshift(this.renderNativeSelectOption(undefined, placeholder, true));\n      }\n\n      return rendered_options;\n    }\n  }, {\n    key: 'renderNativeSelectOption',\n    value: function renderNativeSelectOption(value, label, nonSelectable, isDivider) {\n      return _react2.default.createElement('option', {\n        key: getOptionKey(value),\n        value: isEmptyValue(value) ? '' : value,\n        hidden: nonSelectable && !isDivider ? true : undefined,\n        disabled: nonSelectable ? true : undefined,\n        className: (0, _classnames2.default)('rrui__select__native-option', {\n          'rrui__select__native-option--divider': isDivider\n        })\n      }, label);\n    }\n  }, {\n    key: 'hasEmptyOption',\n    value: function hasEmptyOption() {\n      var options = this.props.options;\n\n      for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref3 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref3 = _i.value;\n        }\n\n        var option = _ref3;\n\n        if (!option.divider && isEmptyValue(option.value)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: 'getSelectedOption',\n    value: function getSelectedOption() {\n      var _props5 = this.props,\n          options = _props5.options,\n          value = _props5.value;\n\n      for (var _iterator2 = options, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref4;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref4 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref4 = _i2.value;\n        }\n\n        var option = _ref4;\n\n        if (!option.divider && option.value === value) {\n          return option;\n        }\n      }\n    }\n  }, {\n    key: 'getAriaLabel',\n    value: function getAriaLabel() {\n      var _props6 = this.props,\n          ariaLabel = _props6.ariaLabel,\n          label = _props6.label;\n      return this.props['aria-label'] || ariaLabel || label;\n    }\n  }, {\n    key: 'getLabel',\n    value: function getLabel() {\n      var _props7 = this.props,\n          label = _props7.label,\n          placeholder = _props7.placeholder,\n          value = _props7.value;\n\n      if (isEmptyValue(value) && !placeholder) {\n        // Label will be shown in placeholder's place\n        // so don't show it as a label to prevent duplication.\n        return;\n      }\n\n      return label;\n    }\n  }, {\n    key: 'getPlaceholder',\n    value: function getPlaceholder() {\n      var _props8 = this.props,\n          label = _props8.label,\n          placeholder = _props8.placeholder,\n          value = _props8.value;\n\n      if (isEmptyValue(value)) {\n        return placeholder || label;\n      }\n    }\n  }, {\n    key: 'shouldShowOptionsList',\n    value: function shouldShowOptionsList() {\n      var _props9 = this.props,\n          native = _props9.native,\n          nativeExpanded = _props9.nativeExpanded;\n      return !native && !nativeExpanded;\n    }\n  }]);\n\n  return Select;\n}(PureComponent), _class2.propTypes = {\n  // A list of selectable options\n  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    // Option value (may be `undefined`)\n    value: _propTypes2.default.any,\n    // Option label (may be `undefined`)\n    label: _propTypes2.default.string,\n    // Option icon\n    icon: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),\n    // Render custom content (a React component).\n    // Receives `{ value, label }` properties.\n    content: _propTypes2.default.func\n  })).isRequired,\n  // HTML form input `name` attribute\n  name: _propTypes2.default.string,\n  // Label which is placed above the select\n  label: _propTypes2.default.string,\n  // Placeholder (like \"Choose\")\n  placeholder: _propTypes2.default.string,\n  // Whether to use native `<select/>`\n  native: _propTypes2.default.bool.isRequired,\n  // Whether to use native `<select/>` when expanded\n  nativeExpanded: _propTypes2.default.bool.isRequired,\n  // Show icon only for selected item,\n  // and only if `icon` is `true`.\n  saveOnIcons: _propTypes2.default.bool.isRequired,\n  // Disables this control\n  disabled: _propTypes2.default.bool,\n  // Set to `true` to mark the field as required\n  required: _propTypes2.default.bool.isRequired,\n  // Set to `true` to display the loading indicator\n  wait: _propTypes2.default.bool.isRequired,\n  // Selected option value\n  value: _propTypes2.default.any,\n  // Is called when an option is selected\n  onChange: _propTypes2.default.func,\n  // Is called when the select is blurred.\n  // This `onBlur` interceptor is a workaround for `redux-form`,\n  // so that it gets the parsed `value` in its `onBlur` handler,\n  // not the formatted text.\n  onBlur: _propTypes2.default.func,\n  // If `scroll` is `false`, then options list\n  // is not limited in height.\n  // Is `true` by default (scrollable).\n  scroll: _propTypes2.default.bool.isRequired,\n  // Component CSS class\n  className: _propTypes2.default.string,\n  // `<button/>` toggler CSS class\n  toggleClassName: _propTypes2.default.string,\n  // CSS style object\n  style: _propTypes2.default.object,\n  // If this flag is set to `true`,\n  // and `icon` is specified for a selected option,\n  // then the selected option will be displayed\n  // as icon only, without the label.\n  icon: _propTypes2.default.bool,\n  // If this flag is set to `true`,\n  // then it makes `<Select/>` not stretch itself\n  // to 100% width by making it `inline-block`.\n  // Is set to `true` when `icon` is `true`\n  // because it makes sense.\n  compact: _propTypes2.default.bool,\n  // HTML `tabindex` attribute\n  tabIndex: _propTypes2.default.number,\n  // `aria-label` for the `<Select/>`'s `<button/>`.\n  // Deprecated, use `aria-label` instead.\n  ariaLabel: _propTypes2.default.string\n}, _class2.defaultProps = {\n  native: false,\n  nativeExpanded: false,\n  saveOnIcons: false,\n  // Set to `true` to mark the field as required\n  required: false,\n  // Show `error` (if passed).\n  indicateInvalid: true,\n  // Set to `true` to display the loading indicator\n  wait: false,\n  // Will show scrollbar on overflow.\n  scroll: true,\n  alignment: 'left'\n}, _temp2)) || _class; // There can be an `undefined` value,\n// so just `{ value }` won't do here.\n\n\nexports.default = Select;\n\nfunction getOptionKey(value) {\n  return isEmptyValue(value) ? '@@rrui/empty' : value;\n}\n\nfunction isEmptyValue(value) {\n  return value === null || value === undefined;\n}","map":null,"metadata":{},"sourceType":"script"}